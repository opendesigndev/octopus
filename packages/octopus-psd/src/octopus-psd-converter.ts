import { DesignConverter } from './services/conversion/design-converter.js'
import { DebugExporter } from './services/exporters/debug-exporter.js'
import { LocalExporter } from './services/exporters/local-exporter.js'
import { createEnvironment } from './services/general/environment.js'
import { getPlatformFactories, setPlatformFactories } from './services/general/platforms/index.js'
import { setDefaults, setLogger } from './services/index.js'
import { PSDFileReaderNode } from './services/readers/psd-file-reader-node.js'
import { readPackageMeta } from './utils/read-pkg-meta.js'

import type { SourceDesign } from './entities/source/source-design'
import type { ConvertDesignResult } from './services/conversion/design-converter'
import type { AbstractExporter } from './services/exporters/abstract-exporter'
import type { NodeFactories, WebFactories } from './services/general/platforms/index'
import type { Logger } from './typings'
import type { PackageMeta } from './utils/read-pkg-meta'

export { LocalExporter, DebugExporter, PSDFileReaderNode }

export type OctopusPSDConverterOptions = {
  platformFactories: WebFactories | NodeFactories
  /** Optional custom Logger. If not passed, default logger will be used. */
  logger?: Logger
  loggerEnabled?: boolean
}

export type DesignConverterOptions = {
  /** SourceDesign instance encapsulates all the source design data. It consists of artboards, images and other assets. It's possible to generate using either built-in `PSDFileReader` or by custom reader. */
  sourceDesign: SourceDesign
  /** Optional unique Design Identifier. If not passed, will be generated by UUIDv4. */
  designId?: string
  /** Optional Exporter. */
  exporter?: AbstractExporter
}

/**
 * Loading of .env file.
 */
createEnvironment()

/**
 * Octopus PSD Converter
 * Main class for converting Adobe Photoshop documents to Octopus3 schema.
 *
 * There are three main processing steps:
 * - reading source data (using _reader_)
 * - conversion (using `.convertDesign()` method with `SourceDesign` instance produced by reader)
 * - exporting (using _exporter_)
 */
export class OctopusPSDConverter {
  private _pkg: PackageMeta
  private _services: {
    benchmark: {
      benchmarkAsync: <T>(cb: (...args: unknown[]) => Promise<T>) => Promise<{ result: T; time: number }>
    }
  }

  /**
   * Octopus PSD converter.
   * @constructor
   * @param {OctopusPSDConverterOptions} [options]
   */
  constructor(options: OctopusPSDConverterOptions) {
    this._setGlobals(options)
    this._pkg = readPackageMeta()
    this._services = this._initServices()
  }

  private _initServices() {
    return {
      benchmark: getPlatformFactories().createBenchmarkService(),
    }
  }

  private _setGlobals(options: OctopusPSDConverterOptions): void {
    setPlatformFactories(options.platformFactories)
    setDefaults({
      logger: { enabled: options.loggerEnabled ?? true },
    })
    if (options.logger) setLogger(options.logger)
  }

  /**
   * Returns package.json meta information
   * @returns {PackageMeta} package meta information
   */
  get pkg(): PackageMeta {
    return this._pkg
  }

  get benchmarkAsync() {
    return this._services.benchmark.benchmarkAsync
  }

  /**
   * Converts given SourceDesign into Octopus entities
   * @param {DesignConverterOptions} [options]
   * @returns {Promise<ConvertDesignResult | null>} returns ConvertDesignResult object or null if conversion fails
   */
  async convertDesign(options: DesignConverterOptions): Promise<ConvertDesignResult | null> {
    return new DesignConverter(options, this).convert()
  }
}
