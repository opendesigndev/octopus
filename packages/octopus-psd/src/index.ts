import { DesignConverter } from './services/conversion/design-converter.js'
import { DebugExporter } from './services/exporters/debug-exporter.js'
import { LocalExporter } from './services/exporters/local-exporter.js'
import { createEnvironment } from './services/general/environment.js'
import { set as setLogger } from './services/instances/logger.js'
import { PSDFileReader } from './services/readers/psd-file-reader.js'
import { readPackageMeta } from './utils/read-pkg-meta.js'

import type { SourceDesign } from './entities/source/source-design.js'
import type { ConvertDesignResult } from './services/conversion/design-converter.js'
import type { AbstractExporter } from './services/exporters/abstract-exporter.js'
import type { Logger } from './typings/index.js'
import type { PackageMeta } from './utils/read-pkg-meta.js'

export { LocalExporter, DebugExporter, PSDFileReader }

export type OctopusPSDConverterOptions = {
  /** Optional custom Logger. If not passed, default logger will be used. */
  logger?: Logger
}

export type DesignConverterOptions = {
  /** SourceDesign instance encapsulates all the source design data. It consists of artboards, images and other assets. It's possible to generate using either built-in `PSDFileReader` or by custom reader. */
  sourceDesign: SourceDesign
  /** Optional unique Design Identifier. If not passed, will be generated by UUIDv4. */
  designId?: string
  /** Optional Exporter. */
  exporter?: AbstractExporter
}

/**
 * Loading of .env file.
 */
createEnvironment()

/**
 * Octopus PSD Converter
 * Main class for converting Adobe Photoshop documents to Octopus3 schema.
 *
 * There are three main processing steps:
 * - reading source data (using _reader_)
 * - conversion (using `.convertDesign()` method with `SourceDesign` instance produced by reader)
 * - exporting (using _exporter_)
 */
export class OctopusPSDConverter {
  /**
   * Octopus PSD converter.
   * @constructor
   * @param {OctopusPSDConverterOptions} [options]
   */
  constructor(options?: OctopusPSDConverterOptions) {
    this._setupLogger(options?.logger)
  }

  private _setupLogger(logger?: Logger) {
    if (logger) setLogger(logger)
  }

  /**
   * Returns package.json meta information
   * @returns {PackageMeta} package meta information
   */
  get pkg(): PackageMeta {
    return readPackageMeta()
  }

  /**
   * Converts given SourceDesign into Octopus entities
   * @param {DesignConverterOptions} [options]
   * @returns {Promise<ConvertDesignResult | null>} returns ConvertDesignResult object or null if conversion fails
   */
  async convertDesign(options: DesignConverterOptions): Promise<ConvertDesignResult | null> {
    return new DesignConverter(options, this).convert()
  }
}
