import {
  convertGradientPositions,
  convertId,
  convertLinearGradientTransform,
  convertRadialGradientTransform,
} from '../convert'

import type { SourceGradientPositions, SourceTransform } from '../../typings/source'

describe('convertId', () => {
  function testExample(id: string, result: string): void {
    test(`convertId(${id}) to be ${result}`, () => {
      expect(convertId(id)).toBe(result)
    })
  }

  type Example = [string, string]
  const examples: Example[] = [
    ['1:22:333:4444', '1-22-333-4444'],
    ['1;22;333;4444', '1_22_333_4444'],
    ['1:22;333:4444', '1-22_333-4444'],
    ['1;22-333;4444', '1_22-333_4444'],
    ['1:22;333-Background', '1-22_333-Background'],
    ['1:22;333:Background', '1-22_333-Background'],
    ['1:22;333_Background', '1-22_333_Background'],
    ['1:22;333;Background', '1-22_333_Background'],
  ]

  examples.forEach((example) => testExample(...example))
})

type GradientTransformOptions = {
  transform: SourceTransform
  width: number
  height: number
  result: SourceTransform
}

describe('convertLinearGradientTransform', () => {
  function testExample({ transform, width, height, result }: GradientTransformOptions): void {
    test(`convertLinearGradientTransform([${transform}], ${width}, ${height}) to be [${result}]`, () => {
      expect(convertLinearGradientTransform(transform, width, height)).toEqual(result)
    })
  }

  type Example = [SourceTransform, number, number, SourceTransform]
  const examples: Example[] = [
    [[1, 0, 0, 1, 0, 0], 1000, 1000, [1000, -0, -0, 1000, 0, 0]],
    [[0, 0.5, 0.5, 0, 0.5, 0.5], 1000, 1000, [-0, 2000, 2000, -0, -1000, -1000]],
    [[0, 1, 1, 0, 0.5, 0.5], 1000, 1000, [-0, 1000, 1000, -0, -500, -500]],
    [[0, -1, -1, 0, 1.5, 1.5], 1000, 1000, [-0, -1000, -1000, -0, 1500, 1500]],
    [[0, 0.5, 1, 0, 0.5, 0.5], 1000, 1000, [-0, 1000, 2000, -0, -1000, -500]],
    [[0, 0.5, 1, 0, 0.5, 0.5], 500, 1000, [-0, 1000, 1000, -0, -500, -500]],
    [[0, -0.5, -1, 0, 1.5, 1], 1000, 500, [-0, -500, -2000, -0, 2000, 750]],
    [[1, 0, 0, 1, 0, 0], 500, 1000, [500, -0, -0, 1000, 0, 0]],
    [[1, 0, -0, 1, 0.5, 0.5], 1000, 1000, [1000, -0, 0, 1000, -500, -500]],
    [[-1, 0, 0, -1, 1.5, 1.5], 1000, 1000, [-1000, -0, -0, -1000, 1500, 1500]],
    [[0, -0.5, -1, 0, 1.5, 1], 1000, 1000, [-0, -1000, -2000, -0, 2000, 1500]],
  ]

  examples.forEach(([transform, width, height, result]) => testExample({ transform, width, height, result }))
})

describe('convertRadialGradientTransform', () => {
  function testExample({ transform, width, height, result }: GradientTransformOptions): void {
    test(`convertRadialGradientTransform([${transform}], ${width}, ${height}) to be [${result}]`, () => {
      expect(convertRadialGradientTransform(transform, width, height)).toEqual(result)
    })
  }

  type Example = [SourceTransform, number, number, SourceTransform]
  const examples: Example[] = [
    [[1, 0, 0, 1, 0, 0], 1000, 1000, [500, 0, 0, 500, 500, 500]],
    [[0, 0.5, 0.5, 0, 0.5, 0.5], 1000, 1000, [0, 1000, 1000, 0, 0, 0]],
    [[0, 1, 1, 0, 0.5, 0.5], 1000, 1000, [0, 500, 500, 0, 0, 0]],
    [[0, -1, -1, 0, 1.5, 1.5], 1000, 1000, [-0, -500, -500, -0, 1000, 1000]],
    [[0, 0.5, 1, 0, 0.5, 0.5], 1000, 1000, [0, 500, 1000, 0, 0, 0]],
    [[0, 0.5, 1, 0, 0.5, 0.5], 500, 1000, [0, 500, 500, 0, 0, 0]],
    [[0, -0.5, -1, 0, 1.5, 1], 1000, 500, [-0, -250, -1000, -0, 1000, 500]],
    [[1, 0, 0, 1, 0, 0], 500, 1000, [250, 0, 0, 500, 250, 500]],
    [[1, 0, -0, 1, 0.5, 0.5], 1000, 1000, [500, 0, 0, 500, 0, 0]],
    [[-1, 0, 0, -1, 1.5, 1.5], 1000, 1000, [-500, -0, -0, -500, 1000, 1000]],
    [[0, -0.5, -1, 0, 1.5, 1], 1000, 1000, [-0, -500, -1000, -0, 1000, 1000]],
  ]

  examples.forEach(([transform, width, height, result]) => testExample({ transform, width, height, result }))
})

type GradientPositionsOptions = {
  positions: SourceGradientPositions | null
  width: number
  height: number
  result: SourceTransform | null
}

describe('convertGradientPositions', () => {
  function testExample({ positions, width, height, result }: GradientPositionsOptions): void {
    test(`convertGradientPositions([${positions}], ${width}, ${height}) to be [${result}]`, () => {
      expect(convertGradientPositions(positions, width, height)).toEqual(result)
    })
  }

  type Example = [SourceGradientPositions, number, number, SourceTransform]
  const examples: Example[] = [
    [
      [
        { x: 0.7484071663429448, y: 0.5981125482742655 },
        { x: 0.9381106963647625, y: 0.5202135928353402 },
        { x: 0.8263061274765091, y: 0.8179389650938131 },
      ],
      298.23,
      277.04,
      [56.5753, -21.5811, 23.2318, 60.9007, 223.1975, 165.7011],
    ],
    [
      [
        { x: 0.5, y: 0.49999999999999994 },
        { x: 0.5, y: 0.9999999999999999 },
        { x: 0, y: 0.5 },
      ],
      300,
      300,
      [0, 150, -150, 0, 150, 150],
    ],
    [
      [
        { x: 0.7800000008783028, y: 0.6849999282300379 },
        { x: 0.6428571477458258, y: 0.8100000321882119 },
        { x: 0.6549998969201287, y: 0.2649999574244637 },
      ],
      400,
      200,
      [-54.8571, 25, -50, -84, 312, 137],
    ],
    [
      [
        { x: 0.7299998755186887, y: 0.79499990762176 },
        { x: 0.11499992494881994, y: 0.3999999927014166 },
        { x: 1.1249997904390319, y: 0.1799999570518913 },
      ],
      200,
      200,
      [-123, -79, 79, -123, 146, 159],
    ],
    [
      [
        { x: 0.9999999403953517, y: -5.960463766996327e-8 },
        { x: 5.9604642999033786e-8, y: 0.9999999999999947 },
        { x: 0.4999999105930355, y: -0.499999999999992 },
      ],
      400,
      200,
      [-400, 200, -200, -100, 400, -0],
    ],
    [
      [
        { x: 0.5000000002274974, y: 0.3499999872474334 },
        { x: 0.5000000004533698, y: 0.6975000036103993 },
        { x: 0.32624999204601446, y: 0.3499999873603701 },
      ],
      400,
      400,
      [0, 139, -69.5, 0, 200, 140],
    ],
    [
      [
        { x: 0.5000000499000709, y: 0.5000000038139634 },
        { x: 0.7287500274774227, y: 0.7249999957920019 },
        { x: 0.37343861235556414, y: 0.6286707694265655 },
      ],
      400,
      400,
      [91.5, 90, -50.6246, 51.4683, 200, 200],
    ],
    [
      [
        { x: 0.5000000074505797, y: 0.5000000074505803 },
        { x: 0.9999999478459403, y: 0.9999999850988417 },
        { x: 0.6250000204890954, y: -7.450581929191458e-9 },
      ],
      400,
      200,
      [200, 100, 50, -100, 200, 100],
    ],
    [
      [
        { x: 0.8037500410826509, y: 0.9262500661116615 },
        { x: 0.7287500652871437, y: 0.7250000551787624 },
        { x: 0.9169522149486384, y: 0.8840629447007909 },
      ],
      400,
      400,
      [-30, -80.5, 45.2809, -16.8748, 321.5, 370.5],
    ],
    [
      [
        { x: -0.4962500525784054, y: 1.5337500164670193 },
        { x: 0.1187499160544255, y: 2.080000041538158 },
        { x: -0.8035131367756327, y: 1.879684578121048 },
      ],
      400,
      400,
      [246, 218.5, -122.9052, 138.3738, -198.5, 613.5],
    ],
    [
      [
        { x: -2.220446049250313e-16, y: 0.9999999999999999 },
        { x: 1.1102230246251565e-16, y: -1.1102230246251565e-16 },
        { x: 0.5624952810281033, y: 1.0000000643384224 },
      ],
      400,
      400,
      [0, -400, 224.9981, 0, -0, 400],
    ],
    [
      [
        { x: 3.2074997848000812, y: 2.1862498454032755 },
        { x: 2.502499913042754, y: 2.4350000261386198 },
        { x: 2.2808772782675777, y: 1.5296987948154421 },
      ],
      200,
      400,
      [-141, 99.5001, -185.3245, -262.6204, 641.5, 874.4999],
    ],
    [
      [
        { x: 0.5000000484284908, y: 0.49999998137383894 },
        { x: 0.9999999701976823, y: 0.9999999701976784 },
        { x: 0.21875240372321325, y: 0.7812475422608067 },
      ],
      400,
      400,
      [200, 200, -112.4991, 112.499, 200, 200],
    ],
    [
      [
        { x: -0.30500008279386714, y: -0.3087499274415306 },
        { x: 1.7249999679299513, y: 1.7237500778584005 },
        { x: -1.4482718340248604, y: 0.8331153226743324 },
      ],
      400,
      400,
      [812, 813, -457.3087, 456.7461, -122, -123.5],
    ],
    [
      [
        { x: 0.5000000070920986, y: 0.49999998085903685 },
        { x: 0.5000000141841975, y: 0.9999999808590367 },
        { x: 0, y: 0.49999998795113576 },
      ],
      400,
      400,
      [0, 200, -200, 0, 200, 200],
    ],
    [
      [
        { x: 0.5000000070920986, y: 0.49999998085903685 },
        { x: 0.5000000141841975, y: 0.9999999808590367 },
        { x: 0, y: 0.49999998795113576 },
      ],
      200,
      400,
      [0, 200, -100, 0, 100, 200],
    ],
    [
      [
        { x: 0.9999998807907227, y: 4.470347647611561e-8 },
        { x: 0.9999998360872462, y: 0.9999999254941991 },
        { x: 0, y: 0 },
      ],
      400,
      400,
      [-0, 400, -400, -0, 400, 0],
    ],
  ]

  examples.forEach(([positions, width, height, result]) => testExample({ positions, width, height, result }))
})
